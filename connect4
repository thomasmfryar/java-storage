package connect4;
import java.util.Scanner;
public class connectFourGame {
        //6 columns and 7rows
        public static int[][] grid = new int[6][7];
        public static Scanner playerInput = new Scanner(System.in);


        private static void display() {
                for(int r=0;r<= grid[0].length -1;r++){
                        for(int c = 0;c <=grid.length -1;c++){
                                System.out.print(grid[c][r] +"     ");

                        }
                        System.out.println(" ");
                }

        }

        public static int checkIfColumnIsFull(int column){
                if(grid[column][0] == 1) {
                        System.out.println("the column chosen is full");
                        return 1;
                }
                return 0;

        }



        //i need to decide whether to make it voided or not
        public static int move(int column){
           if(checkIfColumnIsFull(column) == 1){
               return -1;
           }
           grid[column][findRowHelper(column)] = 1;
           return 1;


        }



        public static int findRowHelper(int column) {
        	
                for(int r = grid[0].length - 1;r >= 0;r--) {
                        if(grid[column][r] == 0) {
                        		
                        		return r;
                        		
                        }

                }
                return -1;

        }

        public static int getPlayerInput() {
			int input = playerInput.nextInt();
			return input;
			
        }




        	public static void main(String[] args) {
        		boolean playing = true;
        		while(playing == true) {
        			display();
        			print("pick a column");
        			move(getPlayerInput());
        		}
        		
        		
            
        }


    public static void print(String text){
       System.out.println(text);
    }
}

/*
 * NOTES:
 * 
 * -make a thing that errors if the player does a number out of the array
 * 	^-make a "checkIfColumnExits" type of method
 * - make the players have different number to put in the board so they don't get mixed up
 * - find a way for the computer to tell if a player has 4 in a row vertically horizontally or diagonal
 */
	
	
	
	
	
	
	
	
	


